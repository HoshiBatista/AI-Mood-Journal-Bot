import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from config.config import config
from core.logger import setup_logger, Logging_Middleware

logger = setup_logger()

bot = Bot(token=config.BOT_TOKEN.get_secret_value())
dp = Dispatcher()


@dp.message(Command("start"))
async def start_command(message: types.Message):
    user = message.from_user
    logger.info(
        f"User {user.id} started bot", extra={"user": f"{user.id} ({user.username})"}
    )

    welcome_text = (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n\n"
        "üå± –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–π VibeScribe.\n\n"
        "–°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "‚Ä¢ üìù –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
        "‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n"
        "‚Ä¢ üîÆ –ü–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
        "‚Ä¢ üì§ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞\n\n"
        "–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /new_entry —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å!\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

    await message.answer(welcome_text)


@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = (
        "üåü –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/new_entry - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π\n"
        "/report - –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç\n"
        "/predict - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await message.answer(help_text)


@dp.message(Command("new_entry"))
async def new_entry_command(message: types.Message):
    logger.info(f"User {message.from_user.id} started new entry")
    await message.answer(
        "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å!\n"
        "–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5, –≥–¥–µ:\n"
        "1 - –û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ üòî\n"
        "2 - –ü–ª–æ—Ö–æ–µ üòû\n"
        "3 - –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ üòê\n"
        "4 - –•–æ—Ä–æ—à–µ–µ üòä\n"
        "5 - –û—Ç–ª–∏—á–Ω–æ–µ üòÑ"
    )


async def main():
    logging_middleware = Logging_Middleware(logger)
    dp.update.outer_middleware(logging_middleware)

    logger.info("Starting Mood Journal Bot...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
